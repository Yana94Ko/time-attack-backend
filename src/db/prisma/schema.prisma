// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int              @id @default(autoincrement())
  email             String           @unique
  encryptedPassword String
  profile           Profile?
  bookmark          Bookmark[]
  tweet             Tweet[]
  comment           Comment[]
  followings        UserConnection[] @relation(name: "targetUser")
  fallowers         UserConnection[] @relation(name: "follower")
  createdAt         DateTime         @default(now())
}

model Profile {
  userId         Int       @id
  user           User      @relation(fields: [userId], references: [id])
  followersCount Int       @default(0)
  followingCount Int       @default(0)
  nickName       String    @unique
  description    String    @default("")
  birth          DateTime?
  profileImgSrc  String?
  bgImgSrc       String?
  location       String?
  updatedAt      DateTime  @updatedAt
}

model UserConnection {
  id           Int              @id @default(autoincrement())
  targetUser   User             @relation(name: "targetUser", fields: [targetUserId], references: [id])
  follower     User             @relation(name: "follower", fields: [followerId], references: [id])
  status       ConnectionStatus
  targetUserId Int
  followerId   Int
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@unique([targetUserId, followerId])
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  userId    Int
  tweetId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tweet {
  id        Int        @id @default(autoincrement())
  author    User       @relation(fields: [authorId], references: [id])
  authorId  Int
  text      String
  bookmark  Bookmark[]
  comment   Comment[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Comment {
  id          Int      @id @default(autoincrement())
  author      User     @relation(fields: [commentorId], references: [id])
  tweet       Tweet    @relation(fields: [tweetId], references: [id])
  commentorId Int
  tweetId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ConnectionStatus {
  blocking
  following
  muting
}
